name: Deploy to AWS S3

on :
  push:
    branches:
      - feat/deploy-frontend

jobs:
  avoid_reduncy:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Cancel Previus Redundant Builds
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
  
  lint:
    if: startsWith(github.event.head_commit.message, 'deploy(frontend):')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup nodeJs
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: 20.x
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: cd frontend && npm install
      - name: Lint
        run: cd frontend && npm run lint

  build:
    if: startsWith(github.event.head_commit.message, 'deploy(frontend):')
    needs: [avoid_reduncy, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup nodeJs
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: 20.x
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: cd frontend && npm install
      - name: Build App
        run: cd frontend && npm run build
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: frontend/dist

  deploy:
    if: startsWith(github.event.head_commit.message, 'deploy(frontend):')
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Upload Artifact
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: frontend/dist

      - name: Upload to Server
        if: ${{ success() }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          mkdir -p /var/www/html/dist/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa.pem
          chmod 600 ~/.ssh/id_rsa.pem
          scp -o StrictHostKeyChecking=no -r -i ~/.ssh/id_rsa.pem frontend/dist/* $SSH_USERNAME@$SSH_HOST:/var/www/html/dist/

      - name: Cleanup SSH Key
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa.pem